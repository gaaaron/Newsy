// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Newsy.Infrastructure.Data;

#nullable disable

namespace Newsy.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContentTags", b =>
                {
                    b.Property<Guid>("ContentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContentsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ContentTags");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcreteSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Contents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Content");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Newsy.Domain.Entities.Feed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.FeedRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<Guid>("FeedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FeedId");

                    b.ToTable("FeedRules", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeedRule");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Newsy.Domain.Entities.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime?>("LastScraped")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SourceFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SourceFolderId");

                    b.ToTable("Sources");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Source");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Newsy.Domain.Entities.SourceFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SourceFolders");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Tag");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Newsy.Domain.Entities.RssContent", b =>
                {
                    b.HasBaseType("Newsy.Domain.Entities.Content");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("RssContent");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.ExcludeTagRule", b =>
                {
                    b.HasBaseType("Newsy.Domain.Entities.FeedRule");

                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TagId");

                    b.HasDiscriminator().HasValue("ExcludeTagRule");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.IncludeTagRule", b =>
                {
                    b.HasBaseType("Newsy.Domain.Entities.FeedRule");

                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TagId");

                    b.HasDiscriminator().HasValue("IncludeTagRule");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.RssSource", b =>
                {
                    b.HasBaseType("Newsy.Domain.Entities.Source");

                    b.Property<string>("RssUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("RssSource");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.SourceTag", b =>
                {
                    b.HasBaseType("Newsy.Domain.Entities.Tag");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SourceId")
                        .IsUnique()
                        .HasFilter("[SourceId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("SourceTag");
                });

            modelBuilder.Entity("ContentTags", b =>
                {
                    b.HasOne("Newsy.Domain.Entities.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Newsy.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Newsy.Domain.Entities.Content", b =>
                {
                    b.HasOne("Newsy.Domain.Entities.Source", "Source")
                        .WithMany("Contents")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.FeedRule", b =>
                {
                    b.HasOne("Newsy.Domain.Entities.Feed", "Feed")
                        .WithMany("Rules")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.Source", b =>
                {
                    b.HasOne("Newsy.Domain.Entities.SourceFolder", "SourceFolder")
                        .WithMany("Sources")
                        .HasForeignKey("SourceFolderId");

                    b.Navigation("SourceFolder");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.SourceFolder", b =>
                {
                    b.HasOne("Newsy.Domain.Entities.SourceFolder", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.ExcludeTagRule", b =>
                {
                    b.HasOne("Newsy.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.IncludeTagRule", b =>
                {
                    b.HasOne("Newsy.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.SourceTag", b =>
                {
                    b.HasOne("Newsy.Domain.Entities.Source", "Source")
                        .WithOne()
                        .HasForeignKey("Newsy.Domain.Entities.SourceTag", "SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.Feed", b =>
                {
                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.Source", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Newsy.Domain.Entities.SourceFolder", b =>
                {
                    b.Navigation("Sources");
                });
#pragma warning restore 612, 618
        }
    }
}
